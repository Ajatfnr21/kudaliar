{
  "name": "detective-amd",
  "version": "2.3.1",
  "description": "Find all dependencies within a JavaScript file using AMD module syntax",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "bin": {
    "detective-amd": "bin/detective-amd.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mrjoelkemp/node-detective-amd"
  },
  "keywords": [
    "amd",
    "detective",
    "dependencies",
    "ast",
    "static analysis"
  ],
  "author": {
    "name": "Joel Kemp",
    "email": "joel@mrjoelkemp.com",
    "url": "http://www.mrjoelkemp.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mrjoelkemp/node-detective-amd/issues"
  },
  "homepage": "https://github.com/mrjoelkemp/node-detective-amd",
  "dependencies": {
    "ast-module-types": "~1.1.1",
    "escodegen": "~1.3.0",
    "get-amd-module-type": "~1.0.0",
    "node-source-walk": "~2.0.0"
  },
  "devDependencies": {
    "mocha": "~2.0.1"
  },
  "readme": "# Detective-AMD [![npm](http://img.shields.io/npm/v/detective-amd.svg)](https://npmjs.org/package/detective-amd) [![npm](http://img.shields.io/npm/dm/detective-amd.svg)](https://npmjs.org/package/detective-amd)\n\nReturns a list of dependencies for a given JavaScript file or AST using any of the AMD module syntaxes.\n\n*Inspired by substack/node-detective but built for AMD*\n\n`npm install detective-amd`\n\n### Usage\n\nLet's say we have the following file definitions:\n\n```javascript\n\n// a.js\ndefine(['./b', './c'], function (b, c) {\n  console.log(b, c);\n});\n\n// b.js\ndefine({\n  name: 'foo'\n});\n\n// c.js\ndefine(function () {\n  return 'bar';\n});\n\n```\n\nHere's how you can grab the list of dependencies of `a.js` **synchronously**.\n\n```javascript\nvar getDependencies = require('detective-amd');\n\nvar srca = fs.readFileSync('a.js', 'utf8');\nvar srcb = fs.readFileSync('b.js', 'utf8');\nvar srcc = fs.readFileSync('c.js', 'utf8');\n\n// Pass in the source code or an AST (if you've already parsed the file)\nconsole.log(getDependencies(srca)); // prints ['./b', './c']\nconsole.log(getDependencies(srcb)); // prints []\nconsole.log(getDependencies(srcc)); // prints []\n\n```\n### Syntax Support\n\n**Supports the 4 forms of AMD module syntax:**\n\n* \"named\": `define('name', [deps], func)`\n* \"dependency list\": `define([deps], func)`\n* \"factory\": `define(func(require))`\n* \"no dependencies\": `define({})`\n\nAlso supports \"driver script\" syntax: `require([deps], func)`\n\nAlso handles REM form: `define(function(require, exports, module) {})`.\n\nAlso handles dynamically loaded dependencies (ex: inner requires).\n\n**Supports driver scripts**\n\nYou can also find the dependencies from a script that has a top-level require (an app initialization/driver/entry-point script):\n\n```javascript\nrequire([\n  './a'\n], function (a) {\n  // My app will get booted up from here\n});\n```\n\n**Expression-based requires**\n\nIf there's a require call that doesn't have a string literal but an expression,\na string (escodegen-generated) representation will be returned.\n\nFor example, if `a.js` was of the \"factory\" form and contained a dynamic module name:\n\n```javascript\n// a.js\n\ndefine(function (require) {\n  // Assume str is some variable that gets set to a string dynamically\n  // var str = ...\n\n  var b = require('./' + str),\n      c = require('./c');\n\n  console.log(b, c);\n});\n```\n\nThe dependency list will be: `[ '\\'./\\' + str', './c' ]`\n\n* Even though that string representation isn't incredibly useful, it's\nstill added to the list to represent/count that dependency\n",
  "readmeFilename": "Readme.md",
  "gitHead": "93630c4f9e24078b752023d9e8f78b0b738ca769",
  "_id": "detective-amd@2.3.1",
  "_shasum": "189a43e803d2403346045c6add0865f8e476b163",
  "_from": "detective-amd@>=2.3.0 <2.4.0"
}
